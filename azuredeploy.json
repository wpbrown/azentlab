{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the domain admin (xoda) and local admins (localadmin)."
      }
    },
    "userPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the standard users and service accounts."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "contoso.com",
      "metadata": {
        "description": "Name of the lab AD DS domain."
      }
    },
    "domainNetbiosName": {
      "type": "string",
      "defaultValue": "contoso",
      "metadata": {
        "description": "Netbios name of the lab AD DS domain."
      }
    },
    "developerName": {
      "type": "string",
      "defaultValue": "developer",
      "metadata": {
        "description": "Name of the domain account for the developer."
      }
    },
    "shutdownTime": {
      "type": "string",
      "defaultValue": "2000",
      "metadata": {
        "description": "Time to shutdown the lab (default 8:00 PM)."
      }
    },
    "shutdownTimezone": {
      "type": "string",
      "defaultValue": "Eastern Standard Time",
      "metadata": {
        "description": "Timezone for shutdown time."
      }
    },
    "shutdownAlertMail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email to alert before shutdown."
      }
    },
    "labNetworkAddressSpace": {
      "type": "string",
      "defaultValue": "10.0.0.0/22",
      "metadata": {
        "description": "Address space for the lab network."
      }
    },
    "labNetworkSubnet": {
      "type": "string",
      "defaultValue": "10.0.2.0/23"
    },
    "labNetworkGatewaySubnet": {
      "type": "string",
      "defaultValue": "10.0.0.0/27"
    },
    "labNetworkAppGatewaySubnet": {
      "type": "string",
      "defaultValue": "10.0.0.32/28"
    },
    "labNetworkDomainControllerIp": {
      "type": "string",
      "defaultValue": "10.0.2.10"
    },
    "labNetworkP2sVpnClients": {
      "type": "string",
      "defaultValue": "10.0.4.0/24"
    },
    "labNetworkIngressAllowed": {
      "type": "array",
      "defaultValue": [
        "[parameters('labNetworkP2sVpnClients')]"
      ]
    },
    "vpnCaCert": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If using VPN P2S connections to connect to the lab, provide a CA cert."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s"
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS"
    },
    "devVmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3"
    },
    "devDiskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS"
    },
    "devVmImageSku": {
      "type": "string",
      "defaultValue": "vs-2019-ent-ws2019"
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "https://github.com/wpbrown/azentlab/releases/download/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "devServerImage": {
      "publisher": "microsoftvisualstudio",
      "offer": "visualstudio2019",
      "sku": "[parameters('devVmImageSku')]",
      "version": "latest"
    },
    "serverImage": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2019-Datacenter-smalldisk",
      "version": "latest"
    },
    "clientImage": {
      "publisher": "MicrosoftWindowsDesktop",
      "offer": "Windows-10",
      "sku": "rs5-enterprisen",
      "version": "latest"
    },
    "vmConfigurations": [
      {
        "name": "domserv01",
        "licenseType": "Windows_Server",
        "dscNodeConfiguration": "DomainController",
        "ipAddress": "[parameters('labNetworkDomainControllerIp')]",
        "dnsServers": [
          "168.63.129.16"
        ],
        "adminUsername": "xoda"
      },
      {
        "name": "domserv02",
        "licenseType": "Windows_Server",
        "dscNodeConfiguration": "FederationServer"
      },
      {
        "name": "appserv01",
        "licenseType": "Windows_Server",
        "dscNodeConfiguration": "BackendServer"
      },
      {
        "name": "appserv02",
        "licenseType": "Windows_Server",
        "dscNodeConfiguration": "MiddlewareServer"
      },
      {
        "name": "appdev01",
        "image": "[variables('devServerImage')]",
        "vmSize": "[parameters('devVmSize')]",
        "diskSku": "[parameters('devDiskSku')]",
        "licenseType": "Windows_Server",
        "dscNodeConfiguration": "DevServer"
      },
      {
        "name": "client01",
        "licenseType": "Windows_Client",
        "dscNodeConfiguration": "Client"
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "lab-nsg",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ingress-nsgr",
            "properties": {
              "description": "Allow Ingress to the Lab.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefixes": "[parameters('labNetworkIngressAllowed')]",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "lab-vnet",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "lab-nsg"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('labNetworkAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "LabSubnet",
            "properties": {
              "addressPrefix": "[parameters('labNetworkSubnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'lab-nsg')]"
              }
            }
          },
          {
            "name": "ApplicationGatewaySubnet",
            "properties": {
              "addressPrefix": "[parameters('labNetworkAppGatewaySubnet')]"
            }
          },
          {
            "name": "GatewaySubnet",
            "properties": {
              "addressPrefix": "[parameters('labNetworkGatewaySubnet')]"
            }
          }
        ],
        "dhcpOptions": {
          "dnsServers": [
            "[parameters('labNetworkDomainControllerIp')]"
          ]
        }
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmConfigurations')[copyIndex()].name, '-nic')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "lab-vnet"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "[if(contains(variables('vmConfigurations')[copyIndex()],'ipAddress'),'Static','Dynamic')]",
              "privateIPAddress": "[if(contains(variables('vmConfigurations')[copyIndex()],'ipAddress'),variables('vmConfigurations')[copyIndex()].ipAddress,json('null'))]",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'lab-vnet', 'labsubnet')]"
              }
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": "[if(contains(variables('vmConfigurations')[copyIndex()],'dnsServers'),variables('vmConfigurations')[copyIndex()].dnsServers,json('null'))]"
        }
      },
      "copy": {
        "name": "nicCopy",
        "count": "[length(variables('vmConfigurations'))]"
      }
    },
    {
      "apiVersion": "2018-06-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmConfigurations')[copyIndex()].name, '-vm')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat(variables('vmConfigurations')[copyIndex()].name, '-nic')]",
        "[if(equals(variables('vmConfigurations')[copyIndex()].name, 'domserv01'), 'lab-vnet', 'domserv01-dscext')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[if(contains(variables('vmConfigurations')[copyIndex()],'vmSize'),variables('vmConfigurations')[copyIndex()].vmSize,parameters('vmSize'))]"
        },
        "osProfile": {
          "computerName": "[variables('vmConfigurations')[copyIndex()].name]",
          "adminUsername": "[if(contains(variables('vmConfigurations')[copyIndex()],'adminUsername'),variables('vmConfigurations')[copyIndex()].adminUsername,'localadmin')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[if(contains(variables('vmConfigurations')[copyIndex()], 'image'), variables('vmConfigurations')[copyIndex()].image, if(equals(variables('vmConfigurations')[copyIndex()].licenseType, 'Windows_Server'), variables('serverImage'), variables('clientImage')))]",
          "osDisk": {
            "name": "[concat(variables('vmConfigurations')[copyIndex()].name, '-os-dsk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[if(contains(variables('vmConfigurations')[copyIndex()],'diskSku'),variables('vmConfigurations')[copyIndex()].diskSku,parameters('diskSku'))]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmConfigurations')[copyIndex()].name, '-nic'))]"
            }
          ]
        },
        "licenseType": "Windows_Server"
      },
      "copy": {
        "name": "vmCopy",
        "count": "[length(variables('vmConfigurations'))]"
      },
      "resources": [
        {
          "condition": "[equals(variables('vmConfigurations')[copyIndex()].licenseType,'Windows_Client')]",
          "type": "extensions",
          "name": "[concat(variables('vmConfigurations')[copyIndex()].name, '-cmdext')]",
          "apiVersion": "2018-06-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat(variables('vmConfigurations')[copyIndex()].name, '-vm')]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "commandToExecute": "powershell.exe -Command \"& { Set-ExecutionPolicy Bypass -Scope LocalMachine -Force; Start-Service -Name winrm; sc.exe config winrm start= auto }\""
            }
          }
        },
        {
          "type": "extensions",
          "name": "[concat(variables('vmConfigurations')[copyIndex()].name, '-dscext')]",
          "apiVersion": "2018-06-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat(variables('vmConfigurations')[copyIndex()].name, '-vm')]",
            "[if(equals(variables('vmConfigurations')[copyIndex()].licenseType,'Windows_Client'),concat(variables('vmConfigurations')[copyIndex()].name, '-cmdext'),'lab-vnet')]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.77",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "1",
            "settings": {
              "configuration": {
                "url": "[uri(parameters('_artifactsLocation'), 'azentlabconfiguration.ps1.zip')]",
                "script": "azentlabconfiguration.ps1",
                "function": "[variables('vmConfigurations')[copyIndex()].dscNodeConfiguration]"
              },
              "configurationArguments": {
                "DomainName": "[parameters('domainName')]",
                "DomainNetbiosName": "[parameters('domainNetbiosName')]",
                "DeveloperName": "[parameters('developerName')]"
              }
            },
            "protectedSettings": {
              "configurationArguments": {
                "AdminPassword": {
                  "userName": "[concat(parameters('domainNetbiosName'),'\\xoda')]",
                  "Password": "[parameters('adminPassword')]"
                },
                "UserPassword": {
                  "userName": "not_used",
                  "Password": "[parameters('userPassword')]"
                },
                "TestAppUrl": "[uri(parameters('_artifactsLocation'), concat('testapp.zip', parameters('_artifactsLocationSasToken')))]",
                "TestAppMidUrl": "[uri(parameters('_artifactsLocation'), concat('testappmid.zip', parameters('_artifactsLocationSasToken')))]"
              },
              "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('vmConfigurations')[copyIndex()].name, '-vm')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "status": "Enabled",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "[parameters('shutdownTime')]"
        },
        "timeZoneId": "[parameters('shutdownTimezone')]",
        "notificationSettings": {
          "status": "[if(empty(parameters('shutdownAlertMail')), 'Disabled', 'Enabled')]",
          "timeInMinutes": 30,
          "emailRecipient": "[parameters('shutdownAlertMail')]"
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmConfigurations')[copyIndex()].name, '-vm'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmConfigurations')[copyIndex()].name, '-vm'))]"
      ],
      "copy": {
        "name": "shutdownCopy",
        "count": "[length(variables('vmConfigurations'))]"
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "lab-vgw-pip",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "lab-vgw",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "default",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'lab-vgw-pip')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'lab-vnet', 'GatewaySubnet')]"
              }
            }
          }
        ],
        "sku": {
          "name": "Basic",
          "tier": "Basic",
          "capacity": 2
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": false,
        "activeActive": false,
        "vpnClientConfiguration": {
          "vpnClientAddressPool": {
            "addressPrefixes": [
              "[parameters('labNetworkP2sVpnClients')]"
            ]
          },
          "vpnClientProtocols": [
            "SSTP"
          ],
          "vpnClientRootCertificates": "[if(not(empty(parameters('vpnCaCert'))), json(concat('[{\"name\": \"cacert\", \"properties\": { \"publicCertData\": \"', parameters('vpnCaCert'), '\" }}]')),  json('null'))]"
        }
      },
      "dependsOn": [
        "lab-vgw-pip",
        "lab-vnet"
      ]
    }
  ],
  "outputs": {}
}